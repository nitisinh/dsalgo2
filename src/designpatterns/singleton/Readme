Why should we have double checked locking ?
Suppose there are two threads T1 and T2. Both come to create the instance and check if “instance==null”.
Now both threads have identified instance variable as null thus they both assume they must create an instance.
They sequentially go into a synchronized block and create the instances. In the end, we have two instances in our application.
This error can be solved using double-checked locking. This principle tells us to recheck the instance variable again in a
synchronized block.
**************************************************************************************************************************
why instance variable should be volatile ?
Please be sure to use “volatile” keyword with instance variable otherwise you can run into an out of order write error scenario,
where reference of an instance is returned before actually the object is constructed i.e. JVM has only allocated the memory and
constructor code is still not executed. In this case, your other thread, which refers to the uninitialized object may
throw null pointer exception and can even crash the whole application.
**************************************************************************************************************************
Singleton with bill pugh solution
Bill Pugh was main force behind the java memory model changes.
His principle “Initialization-on-demand holder idiom” also uses the static block idea, but in a different way. It suggest to use static inner class.

public class BillPughSingleton {
  private BillPughSingleton() {
  }

  private static class LazyHolder {
    private static final BillPughSingleton INSTANCE = new BillPughSingleton();
  }

  public static BillPughSingleton getInstance() {
    return LazyHolder.INSTANCE;
  }
}